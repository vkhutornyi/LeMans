{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "functionAppName": {
            "defaultValue": "devlemansfsc",
            "type": "string"
        },
        "functionAppLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
              "[resourceGroup().location]",
              "eastasia",
              "southeastasia",
              "centralus",
              "eastus",
              "eastus2",
              "westus",
              "northcentralus",
              "southcentralus",
              "northeurope",
              "westeurope",
              "japanwest",
              "japaneast",
              "brazilsouth",
              "australiaeast",
              "australiasoutheast",
              "southindia",
              "centralindia",
              "westindia",
              "canadacentral",
              "canadaeast",
              "uksouth",
              "ukwest",
              "westcentralus",
              "westus2"
            ]
        }
    },
    "variables": {
        "hostingPlanName": "[parameters('functionAppName')]"     
    },
    "resources": [
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2021-02-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[parameters('functionAppLocation')]",
            "sku": {
              "name": "Y1",
              "tier": "Dynamic",
              "size": "Y1",
              "family": "Y"
            },
            "properties": {
              "computeMode": "Dynamic"
            }
        },        
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2021-03-01",
            "name": "[parameters('functionAppName')]",
            "location": "[parameters('functionAppLocation')]",
            "kind": "functionapp",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
            ],            
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "siteConfig": {
                    "numberOfWorkers": 1,
                    "acrUseManagedIdentityCreds": false,
                    "alwaysOn": false,
                    "http20Enabled": false,
                    "functionAppScaleLimit": 200,
                    "minimumElasticInstanceCount": 0
                }
            }
        },
        {
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2021-03-01",
            "name": "[concat(parameters('functionAppName'), '/web')]",
            "location": "[parameters('functionAppLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
            ],
            "properties": {
                "numberOfWorkers": 1,
                "defaultDocuments": [
                    "Default.htm",
                    "Default.html",
                    "Default.asp",
                    "index.htm",
                    "index.html",
                    "iisstart.htm",
                    "default.aspx",
                    "index.php"
                ],
                "netFrameworkVersion": "v6.0",
                "requestTracingEnabled": false,
                "remoteDebuggingEnabled": false,
                "httpLoggingEnabled": false,
                "acrUseManagedIdentityCreds": false,
                "logsDirectorySizeLimit": 35,
                "detailedErrorLoggingEnabled": false,
                "scmType": "None",
                "use32BitWorkerProcess": true,
                "webSocketsEnabled": false,
                "alwaysOn": false,
                "managedPipelineMode": "Integrated",
                "virtualApplications": [
                    {
                        "virtualPath": "/",
                        "physicalPath": "site\\wwwroot",
                        "preloadEnabled": false
                    }
                ],
                "loadBalancing": "LeastRequests",
                "experiments": {
                    "rampUpRules": []
                },
                "autoHealEnabled": false,
                "vnetRouteAllEnabled": false,
                "vnetPrivatePortsCount": 0,
                "cors": {
                    "allowedOrigins": [
                        "https://portal.azure.com"
                    ],
                    "supportCredentials": false
                },
                "localMySqlEnabled": false,
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "Any",
                        "action": "Allow",
                        "priority": 1,
                        "name": "Allow all",
                        "description": "Allow all access"
                    }
                ],
                "scmIpSecurityRestrictions": [
                    {
                        "ipAddress": "Any",
                        "action": "Allow",
                        "priority": 1,
                        "name": "Allow all",
                        "description": "Allow all access"
                    }
                ],
                "scmIpSecurityRestrictionsUseMain": false,
                "http20Enabled": false,
                "minTlsVersion": "1.2",
                "scmMinTlsVersion": "1.2",
                "ftpsState": "AllAllowed",
                "preWarmedInstanceCount": 0,
                "functionAppScaleLimit": 200,
                "functionsRuntimeScaleMonitoringEnabled": false,
                "minimumElasticInstanceCount": 0,
                "azureStorageAccounts": {}
            }
        },
        {
            "type": "Microsoft.Web/sites/functions",
            "apiVersion": "2021-03-01",
            "name": "[concat(parameters('functionAppName'), '/Compress')]",
            "location": "[parameters('functionAppLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
            ],
            "properties": {
                "language": "CSharp",
                "isDisabled": false,
                "config": {
                    "disabled": false,
                    "bindings": [
                        {
                            "name": "req",
                            "type": "httpTrigger",
                            "direction": "in",
                            "authLevel": "function",
                            "methods": [
                                "post"
                            ]
                        },
                        {
                            "name": "$return",
                            "type": "http",
                            "direction": "out"
                        }
                    ]
                },
                "files": {
                    "run.csx": "#r \"Newtonsoft.Json\"\n\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Net;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Primitives;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing System.IO.Compression;\nusing System.Text;\n\npublic static async Task<IActionResult> Run(HttpRequest req, ILogger log)\n{    log.LogInformation(\"Starting compress function.\");\n    string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n\n    dynamic data = JsonConvert.DeserializeObject(requestBody);\n    log.LogInformation(\"Deserializing JSON.\");\n\n    List<ArchiveFile> files = new List<ArchiveFile>();\n    var objs = data.files;\n\n    foreach (var obj in objs)\n    {        ArchiveFile file = new ArchiveFile();\n        file.Name = obj.name;\n        file.URL = obj.url;\n\n        string temp = obj.name;\n        int fileExtPos = temp.LastIndexOf(\".\");\n        if (fileExtPos >= 0)        {\n            file.Name = temp.Substring(0, fileExtPos);\n            file.Extension = temp.Substring(fileExtPos + 1);\n        }\n        files.Add(file);\n    }\n\n    byte[] arr = null;\n    if (files.Count > 0)\n    {\n        arr = GeneratePackage(files, log);\n    }\n\n    if (arr != null)\n    {\n        return new FileContentResult(arr, /"application/octet-stream/");/n    }/n    else/n    {/n        return new BadRequestObjectResult(/"Zip archive was not created!/");/n    }/n}/n/npublic static byte[] GeneratePackage(List<ArchiveFile> fileList, ILogger log)/n{/n    byte[] result;/n    log.LogInformation(/"Generating zip archive./");/n/n    using (var packageStream = new MemoryStream())/n    {/n        using (var archive = new ZipArchive(packageStream, ZipArchiveMode.Create, true))/n        {/n            foreach (var virtualFile in fileList)/n            {/n                    log.LogInformation($/"Processing {virtualFile.Name} file./");/n                    var zipFile = archive.CreateEntry(virtualFile.Name + /"./" + virtualFile.Extension);/n/n                    byte[] content = new HttpClient().GetByteArrayAsync(virtualFile.URL).Result;/n                    using (var sourceFileStream = new MemoryStream(content))/n                    using (var zipEntryStream = zipFile.Open())/n                    {/n                        sourceFileStream.CopyTo(zipEntryStream);/n                    }/n            }/n        }/n        result = packageStream.ToArray();/n    }/n    return result;/n}/n/npublic class ArchiveFile/n{/n    public string Name;/n    public string Extension;/n    public string URL;/n}"
                }                
            }
        }
    ]
}